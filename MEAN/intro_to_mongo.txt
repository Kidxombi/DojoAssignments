> use my_first_db
switched to db my_first_db
> db.createCollection('student')
{ "ok" : 1 }
> db.student.insert('{name: "Sam", home_state: "California", lucky_number: 19, birthday: {month: 5, day: 15, year: 1988}}')
2017-04-08T17:03:20.643-0700 E QUERY    [thread1] Error: attempted to save a string value.  document expected. :
DBCollection.prototype._validateObject@src/mongo/shell/collection.js:224:1
DBCollection.prototype._validateForStorage@src/mongo/shell/collection.js:241:5
Bulk/this.insert@src/mongo/shell/bulk_api.js:663:17
DBCollection.prototype.insert@src/mongo/shell/collection.js:349:13
@(shell):1:1
> db.student.insert({name: "Sam", home_state: "California", lucky_number: 19, birthday: {month: 5, day: 15, year: 1988}})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name: "Ted", home_state: "Washington", lucky_number: 45, birthday: {month: 5, day: 13, year: 1975}})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name: "Obama", home_state: "California", lucky_number: 1, birthday: {month: 11, day: 27, year: 2001}})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name: "Skeletor", home_state: "Washington", lucky_number: 999, birthday: {month: 6, day: 11, year: 1998}})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name: "Beelz", home_state: "Arizona", lucky_number: 666, birthday: {month: 1, day: 1, year: 1300}})
WriteResult({ "nInserted" : 1 })
> db.student.insert({name: "Stacy", home_state: "Washington", lucky_number: 42, birthday: {month: 9, day: 4, year: 1982}})
WriteResult({ "nInserted" : 1 })
> db.student.find({$or:[{home_state:"California"},{home_state:"Washington"}]}).pretty()
{
	"_id" : ObjectId("58e97a67d75c17b021070102"),
	"name" : "Sam",
	"home_state" : "California",
	"lucky_number" : 19,
	"birthday" : {
		"month" : 5,
		"day" : 15,
		"year" : 1988
	}
}
{
	"_id" : ObjectId("58e97a85d75c17b021070103"),
	"name" : "Ted",
	"home_state" : "Washington",
	"lucky_number" : 45,
	"birthday" : {
		"month" : 5,
		"day" : 13,
		"year" : 1975
	}
}
{
	"_id" : ObjectId("58e97ab1d75c17b021070104"),
	"name" : "Obama",
	"home_state" : "California",
	"lucky_number" : 1,
	"birthday" : {
		"month" : 11,
		"day" : 27,
		"year" : 2001
	}
}
{
	"_id" : ObjectId("58e97ad6d75c17b021070105"),
	"name" : "Skeletor",
	"home_state" : "Washington",
	"lucky_number" : 999,
	"birthday" : {
		"month" : 6,
		"day" : 11,
		"year" : 1998
	}
}
{
	"_id" : ObjectId("58e97b1fd75c17b021070107"),
	"name" : "Stacy",
	"home_state" : "Washington",
	"lucky_number" : 42,
	"birthday" : {
		"month" : 9,
		"day" : 4,
		"year" : 1982
	}
}
> db.student.find({lucky_number:{$gt:3}}).pretty()
{
	"_id" : ObjectId("58e97a67d75c17b021070102"),
	"name" : "Sam",
	"home_state" : "California",
	"lucky_number" : 19,
	"birthday" : {
		"month" : 5,
		"day" : 15,
		"year" : 1988
	}
}
{
	"_id" : ObjectId("58e97a85d75c17b021070103"),
	"name" : "Ted",
	"home_state" : "Washington",
	"lucky_number" : 45,
	"birthday" : {
		"month" : 5,
		"day" : 13,
		"year" : 1975
	}
}
{
	"_id" : ObjectId("58e97ad6d75c17b021070105"),
	"name" : "Skeletor",
	"home_state" : "Washington",
	"lucky_number" : 999,
	"birthday" : {
		"month" : 6,
		"day" : 11,
		"year" : 1998
	}
}
{
	"_id" : ObjectId("58e97af5d75c17b021070106"),
	"name" : "Beelz",
	"home_state" : "Arizona",
	"lucky_number" : 666,
	"birthday" : {
		"month" : 1,
		"day" : 1,
		"year" : 1300
	}
}
{
	"_id" : ObjectId("58e97b1fd75c17b021070107"),
	"name" : "Stacy",
	"home_state" : "Washington",
	"lucky_number" : 42,
	"birthday" : {
		"month" : 9,
		"day" : 4,
		"year" : 1982
	}
}
> db.student.find({lucky_number:{$lte:10}}).pretty()
{
	"_id" : ObjectId("58e97ab1d75c17b021070104"),
	"name" : "Obama",
	"home_state" : "California",
	"lucky_number" : 1,
	"birthday" : {
		"month" : 11,
		"day" : 27,
		"year" : 2001
	}
}
> db.student.find({lucky_number:{$in:[1,2,3,4,5,6,7,8,9]}}).pretty()
{
	"_id" : ObjectId("58e97ab1d75c17b021070104"),
	"name" : "Obama",
	"home_state" : "California",
	"lucky_number" : 1,
	"birthday" : {
		"month" : 11,
		"day" : 27,
		"year" : 2001
	}
}
> db.student.update({}, {$set:{interests:['coding', 'brunch', 'MongoDB']}}, {multi:true})
WriteResult({ "nMatched" : 6, "nUpserted" : 0, "nModified" : 6 })
> db.student.update({name:"Obama"},{$push:{interests:"Taxes"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.student.update({name:"Obama"},{$pull:{interests:"Taxes"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.student.remove({lucky_number:{$gt:5}}, true)
WriteResult({ "nRemoved" : 1 })
> db.student.update({}, {$set:{number_of_belts:0}}, {multi:true})
WriteResult({ "nMatched" : 5, "nUpserted" : 0, "nModified" : 5 })
> db.student.update({home_state:"California"}, {$set:{number_of_belts:1}}, {multi:true})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.student.update({}, {$rename:{number_of_belts:belts_earned}}, {multi:true})
2017-04-08T17:25:59.970-0700 E QUERY    [thread1] ReferenceError: belts_earned is not defined :
@(shell):1:33
> db.student.update({}, {$rename:{'number_of_belts':'belts_earned'}}, {multi:true})
WriteResult({ "nMatched" : 5, "nUpserted" : 0, "nModified" : 5 })
> db.student.update({}, {$unset:{lucky_number:""}}, {multi:true})
WriteResult({ "nMatched" : 5, "nUpserted" : 0, "nModified" : 5 })
> db.student.update({}, {$set:{$currentDate:{updated_at:true}}}, {multi:true})
WriteResult({
	"nMatched" : 0,
	"nUpserted" : 0,
	"nModified" : 0,
	"writeError" : {
		"code" : 52,
		"errmsg" : "The dollar ($) prefixed field '$currentDate' in '$currentDate' is not valid for storage."
	}
})
> db.student.update({}, {$set:{$currentDate:{updated_at:true}}, {multi:true})
... ^C

> db.student.update({}, {$set:{updated_at:$currentDate}}, {multi:true})
2017-04-08T17:34:11.201-0700 E QUERY    [thread1] ReferenceError: $currentDate is not defined :
@(shell):1:30
> db.student.update({}, {$set:{$currentDate:updated_at:true}}, {multi:true})
2017-04-08T17:34:52.146-0700 E QUERY    [thread1] SyntaxError: missing } after property list @(shell):1:52
> db.student.update({}, {$set:{$currentDate:{updated_at:true}}}, {multi:true})
WriteResult({
	"nMatched" : 0,
	"nUpserted" : 0,
	"nModified" : 0,
	"writeError" : {
		"code" : 52,
		"errmsg" : "The dollar ($) prefixed field '$currentDate' in '$currentDate' is not valid for storage."
	}
})
> db.students.update({}, {$currentDate:{updated_on:true}},{multi:true})
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })
